{"podcast_details": {"podcast_title": "Mastering Business Analysis", "episode_title": "MBA228: Software Development Pearls", "episode_image": "http://masteringbusinessanalysis.com/wp-content/uploads/powerpress/MBA_Cover2048.jpg", "episode_transcript": " Welcome to Mastering Business Analysis, Episode 228, Software Development Pearls, lessons from Carl Wiegers. Let's go. Welcome to Mastering Business Analysis, where we bring you the tips, tools, and techniques to succeed in your career as a business analyst. Now here's your host, Dave Sabo. Thank you for joining me for another episode of Mastering Business Analysis. I'm Dave Sabo, your host, and today we have a special treat. We're joined by Carl Wiegers. Carl Wiegers is an independent consultant, author, speaker, and thought leader in the project community. And we spent some time talking about his latest book, Software Development Pearls, lessons from 50 years of software experience. In this episode, Carl shares a lot of his life lessons that he's learned on everything ranging from requirements, design, project management, culture, teamwork, quality, process improvement, and more. You can use his lessons to become significantly better at what you do. Carl, welcome back. It's always great to have you on. Thanks very much, Dave. Happy to be here. So, Carl, I told you before, you're the Stephen King of knowledge books. I heard you wrote a new book and I'm dying to talk a little bit about it. Great. I appreciate that very generous comment. I don't think Stephen King would probably agree with you, but it's great to hear. And yes, I'm excited about the new book. So Software Development Pearls, lessons from 50 years of software experience. What drove you to write that book? Well, there's a lot of stuff I'm not good at in the world, but there's one thing I'm fairly good at, Dave, which is I experience some event or something that happens or I hear about something that happens with somebody else, maybe one of my consultant clients is sharing a story with me. And one thing I'm pretty good at is kind of gleaning from that some insight or wisdom that might be useful in the future. And that's where a lot of these things came from because I realized as I made these observations and a lot of times the event that I'm talking about is a mistake I made somewhere along the line, but I realized a lot of these lead to lessons that can be generalized and are broadly applicable to pretty much everybody working in software in this case. So I like to kind of compile these lessons and share them with people. In 2011, I wrote a book called Pearls from Sand, which had 37 life lessons. And then in early 2021, I wrote a book called The Thoughtless Design of Everyday Things, which had 70 lessons about product design. And now in software development, Pearls, I've collected 60 lessons I've learned in several areas of software development since I started programming in 1970. Awesome. And those lessons range from everything from requirements, design, project management, culture, teamwork, quality, process improvement, and everything had actionable steps, which I really love about this book. Yeah, I think that's important. I mean, this is not a book of philosophy. There's plenty of books on philosophy and theory. And frankly, I don't think very many people care about that. Busy people care about ways that we can learn how to do our work better, more efficiently, and have fun along the way. And that's what I try to do. So each of the sections, you itemize the various sections like requirements, design, so forth. Each of those starts with a brief tutorial on the topic. And then in each lesson, I have a lot of experience stories, real stories, either my own experiences or those that others have shared with me, which really kind of make it real. They show how these things came about and how they apply in practice. And then I do provide a little bit of a practical tutorial. I'm a very pragmatic person. I'm not a methodologist. I'm not a theorist. I'm a pragmatist. So I try to provide people with things that they could learn about and hopefully get excited about doing something differently and the tools to begin applying the knowledge so they can hopefully get a little bit better results the next time around. Yeah. I love the way you structured the book. It really made me think about new things. And a lot of the stories you shared were not only amusing, but it really made it real to me. And I've experienced a lot of similar situations. So I think it was a really well structured book and really made me think deeper about the way I work. Oh, that's excellent. That's exactly what I'm hoping people will do, Dave, is to kind of see themselves in there. People who have worked on a variety of projects have encountered a lot of these situations. I would be surprised if there's a whole lot of lessons in there that are completely new ideas to people. I hope there are some because we all have different experiences, especially people who maybe haven't been doing it as long as some of us. But I do hope people will think about it and not just read it, but say, okay, what's in here that I could then help me do a better job? And I've tried to structure the book in a way that will help people do that, because in each of these six categories, like requirements and project management, in addition to the little tutorial at the beginning, just providing an overview of that domain, I do two things. One, there's a section called First Steps in each of those chapters. And the first steps ask a bunch of questions to get the reader to start thinking about, how does this apply in their situation? What are some of the issues they encounter around requirements or teamwork kinds of things? And kind of start doing a little bit of introspection analysis to assess where they are today. And then at the end of each chapter, after sharing anywhere from six to 16 lessons on the topic, I've got a section called Next Steps. And in the next steps, I give people a list of five or six things that they could do to begin thinking about building on what they thought of from the first steps and then taking the information in that chapter on a topic area like process improvement, and begin thinking about how to actively apply it on their projects in their world. Because I want people to make a list of things as they go along and say, oh, here's some ideas, here's stuff I want to learn more about, here's stuff I think would be helpful, here's stuff that I want to share with the people I work with. So I want people to come up with a bunch of action items on their own, and I've given them the first steps and the next steps in each section to kind of help them get started on that thought process. Perfect. And when I read the book, I noticed that there are a couple key themes that I saw repeated among those different categories. One is the need to iterate. There's a few things about understanding stakeholders and customers. There's things about building quality in. So maybe we could talk about some of those key themes and how it relates to some of the categories. Why don't we start with the need to iterate? And this touched upon from a requirements standpoint, a design standpoint, a project management standpoint. Let's talk a little bit more about why we need to iterate and what's important about that. Yeah, I think that's a great place to start. I don't know about you, but I don't get things right the first time all the time. Oh, I always do. Yeah, everything takes more than one shot. And design is a good example. In fact, the first lesson in the design category says design demands iteration. And the reason that I say that is because there's always more than one design solution for a software problem and seldom a single best solution. And my experience is that the first design approach I come up with is unlikely to be the best option. And a good friend of mine described it really well. He said, you're not done with design until you've created at least three designs and then discarded them because none of them was good enough and take the best ideas from those three and then build a better fourth design. I think that's a very important insight for people. It's like, well, we'll just go design. We'll just go do requirements. And it just doesn't work that way. These are cyclical things you have to plan in your project management approach to say, okay, we're going to have to take a few tries on this. We're going to have to build in some reviews. We're going to have to get some feedback. We might have to do some prototypes. We have to do some modeling. I'm a huge fan of design and requirements modeling. And so the idea that you're going to have to take a few tries to get things as right as they need to be is something we just need to build into our thinking. Of course, the agile approach kind of does this in a way, but that's also more incremental than it is iterative. The two are very closely related. But let's just recognize you're not going to just go off and have a conversation with a customer and come back and say, okay, we got it, write it down and move ahead. You're going to have to have feedback loops and revision cycles. And that takes time. And if people don't plan for that time, they're going to have some scheduling problems. Right. And I like what you said about plan to throw away the first copy, basically. Even when we develop requirements, when we talk to stakeholders, we'll come up with some requirements based on those discussions or whatever we discover. We'll review it with that feedback loop, like you mentioned. It'll be iterated upon. It'll be revised. We'll go deeper in some areas. So like you said, unless it's something that's really, really simple that we've done hard times before, you're probably not going to get everything right, right out of the gate. So we do need to go back, create those feedback loops and iterate on the requirements, the design, the estimation you talk about in the book. Talk about icebergs and icebergs are always larger than they first appear. Yeah, there's always a lot you don't see. You know, and I think people know this, but they don't necessarily act like they know it. And so that, yeah, that's one of the project management lessons. Icebergs are always larger than they first appear. And what I mean by that is that there's going to be growth in the project. There's going to be new information, new ideas, new capabilities that come along. You have to build in. And if you don't anticipate that and don't include contingency buffers into your plans, then you're going to have another problem because it's like, oh, yeah, well, we plan to do this. But now you've added some new stuff that we just tack it on at the end. Does it replace something else? I can give you a great example of how this happened once. There's a guy named Capers Jones who's studied software metrics for many years. And some time ago, he said that on at least on large projects, the requirements typically grow by one to 3% per month over the long term project. Well, of course, that's one of the reasons iterative development life cycles came along was so that you can kind of roll with that as best you can. So I was at a consulting site once and my client was working on a huge project. It was like a five year project. And so I talked to one of the senior managers and I said, you know, based on this information about project growth, let's assume that your project's requirements could grow over time about 2% a month. Does that seem plausible? And he said, yeah, that's realistic. So then I said, okay, so over the span of a five year, that is 60 month or so planned project, the final product could easily be at least twice as big as you think it's going to be today. And he said, yeah, that could happen. I said, well, have you built contingency buffers into any of your plans to try to accommodate some of that growth? And his answer was, let's hear it from the audience. No. And that shouldn't surprise any of us. But it's sure going to surprise them and I don't know what the final outcome was, but I have a hunch that project took a fair amount longer than five years they were planning. Yeah, you're right. The bigger the project, the more unknowns, ambiguity and the more likely it is to change. So that's a really good point. Yep. Very common. So one of the other themes that I mentioned, understanding stakeholders and customers. And in your book, you talk about stakeholder analysis a lot. You talk about a user centric approach, understanding what the customer really wants and needs and being able to work with your stakeholders. What have you seen in that area? Yeah, I think that's a very good observation, Dave, that that's a recurrent theme throughout the book. And really the biggest lesson that I've learned is that usage centric development is much more likely to satisfy customer needs than product or feature centric development. So that begins by understanding your stakeholders. And I think you need to cast a really big net early in the project to try to think about all of the possible stakeholders that you might have to deal with. And stakeholders are basically individuals or groups who can shape or influence the direction of a project or who are affected by the project. Now, some of those will have input. Some of them are just going to be victims of whatever happens. But customers are a subset of stakeholders and users are a subset of customers. You have customers who maybe go specify a product or acquire a commercial product, but they don't necessarily use it themselves. And so they're doing that on behalf of someone else. So I think a real important success factor here, and I've got several lessons that get at this, is to identify your various user classes and identify who's going to be the literal voice of the customer for each of those user classes. I call those people product champions. And then from that, figure out how do you engage with them? We don't just gather requirements. I mean, BAs know you don't just gather or collect requirements. There's also a discovery and invention process. So that's why I use the term requirements of elicitation, not requirements gathering. So once we've gone through the stakeholder analysis and identified user representatives, we have to do some elicitation. And I really like to focus that elicitation not on the features we want to build, which sometimes shows up. If you just ask people what they want or just write me a story of some feature you want, I don't care about features yet. I care about knowing what people need to do with the product. And that's the difference between the usage-centric approach and the product-centric approach. So I think anything we can do to get the voice of the customer closer to the ear of the developer, often mediated by skilled business analysts, I think that's a good thing. Yeah. One of the things I found interesting in your book, you did talk about those different user classes, but you mentioned sometimes users might not even be humans. Yeah. You know, we've got this whole Internet of Things, right? And we had embedded software controlling various devices even before there was a concept of an Internet of Things. And so we need to think about various kinds of devices and networks and things that are going to be the other end of the communication with our systems. And since they usually don't talk and my car doesn't talk to me usually, it means I have to find out if I'm building some sub-feature within a car, who's the right person to talk to who can imagine how this device is going to work and what it needs to get the job done, what its interfaces are and so forth. In fact, one reason that's so important gets to one of my design lessons, which is that a whole lot of system problems take place at the interfaces. So you need someone who can speak for those non-human users or even users who are humans, with whom we might not have direct contact. So we have to have surrogates who can speak for them with authority and accuracy. Yeah, absolutely. Another great line in your book was the customer is not always right, but the customer always has a point. And I love that. Yeah. Have you had some examples that you can think of yourself where maybe you encountered customers who weren't right or maybe you were a customer and something wasn't right? Anything like that come to mind for you? There have been a lot of situations where either the customer is asking for X or they say we can't do this thing and they may not be correct or they may not be asking for the right thing. But once you dive deeper into, well, why is that a point? Why is that true for you? Either you ask them or you just think about what makes that true for that person. Perception is reality for that person. So for whatever reason that's true to them, your job is to find out why that's true because there's probably something going on there that you need to address and you just can't say, they're wrong, ignore it because something bad is going to happen if you do that. Yeah, I think it's tempting to either say you're wrong and ignore it or to say, well, they're the customer and they're always right. So I guess we better figure out how to do that. And both of those are, I think, not the right answer. So what I mean, for example, like the customer is not always right, but the customer always has a point. I've been a consultant for many years and a lot of the work I've done is on requirements and business analysis with clients and through training. And the single biggest complaint I've heard about the things that make BA's lives difficult is when they say, our customers don't give us requirements, they give us solutions. And that gets to just what you were just saying, Dave, which is, all right, so that's what the customer said they needed. That's their perception of reality. But as you said, let's dig below that a little bit and say, well, why is that what you're saying you need? In other words, if that was the answer, what was the question? And I think an important part of business analysis is to dig down below that surface of presented needs or presented demands or features, which often are in the guise of solutions and say, okay, there's a reality there, we need to understand better and get down to the point where we can state or at least understand the real need. And from then, we can come up with possibly a better solution. I mean, maybe we come up with that same solution that the customer presented, but maybe not. And a lot of times you need to generalize it or you need to reframe it and say, well, there's a better way to do that. And along the way, you might be looking for reuse opportunities as well, which means you have to adjust the solution a little bit and compromise. So there's a lot more to it than just doing what the customer says because hey, the customer is always right. So I just don't like seeing that sign in places, even if I'm the customer, because sometimes I've been wrong. Right. Let's focus for a little bit on quality as well, because that was another reoccurring theme that I noticed. You talk about if you don't get the requirements right, it doesn't matter how well you execute the rest of the project. You talk about software quality, you could either pay now or pay more later. You talk about we might not have time to build the software right, but we find the resources to fix it later. There's a lot here around quality and how shifting quality left is really important because it's a lot harder to fix things the farther out you go in the lifecycle. Yeah, that's exactly the right theme is let's try to push quality to the left along the time axis, which means building quality in from the beginning. And we could probably spend a couple hours talking about that very topic. But one of the things people need to understand is, yeah, we can fix it later. And maybe you're in a hurry to get something out in this iteration. And so you just throw something together. The design is not the my, you know, you ought to refactor it someday. Maybe it's not really satisfying all your quality attribute criteria, all the illities, but we'll take care of that later. Yeah, you can. But it's always going to cost you more to fix it later than it will to do it right the first time. And it's a mystery to me why organizations never do seem to have the time to do it right, but they always find the time, the resources, the money to fix it. And another thing that's related to that is that we all want higher productivity. And so you have to ask yourself, well, what's inhibiting our productivity today? Why do we not already have higher productivity? And a lot of times that's because we have to spend a significant fraction of our resources redoing things that were already done because they weren't done well enough. And I hate rework. I learned that ninth grade wood shop. I learned that I hate rework. So I try to focus on getting quality in early, recognizing that may cost you a little more upfront and you have to make appropriate trade off decisions. You know, what's more important now, the speed or the quality, you have to make that decision consciously. For example, there's consciously accepted technical debt, which can be acceptable, but then there's unconscious technical debt where you just charge ahead and say, we'll fix it later and hopefully you will, but it's going to cost you more. Right. And the book has a lot of information on other areas. I saw a lot on communication, distance from team members and stakeholders. You can talk a little bit about working in a virtual environment. There is a lot around continuous learning and actually applying that knowledge. I think this is a really, really great book and made me think a lot. So really appreciate writing this. Now, in the spirit of continuous learning and applying the knowledge, wonder if you have one action that people could actually take based on what you've discovered over the years, something they can do right now and start seeing some results. Yeah. Well, I appreciate your kind comments, Dave. I'm glad you enjoyed the book. Your reaction is exactly what I was hoping people would have when they read it. So that's great to hear. And I think the best thing people can do for themselves is very simple. One of the things I tried to do long ago, I haven't been a developer for some years, but when I was on each new project, I would try to think of two areas I wanted to get better at. They might be estimation or task tracking or modeling or data structures or anything, and pick two areas you want to get better at and then vow to spend some of your time on the project learning about those areas. Maybe take a training class, maybe watch some videos, maybe do some reading. I can suggest some books. And then look for opportunities actively to apply those on your project to try to do certain aspects of the project in those two areas better than you would have done them had you not taken that step to continuously learn something very focused. Because there's always going to be too many things to change at once. So you got to focus. And that would be the one thing I would suggest, two areas you want to get better at and then start doing it. Nice. Great suggestion. Carl, if people want to learn more about you and what you do, where can they go? I've got a number of websites. There's carlwiggers.com, which is my personal site. Process Impact is the name of my consulting and training company. So processimpact.com is the website for the company. And that's got information about all the books. It's got links to a whole lot of articles that I have available online. And if you wanted to learn more about software development pearls, you can actually go to tinyurl.com slash SD pearls. And of course, you can get at that from either of my book websites as well. Perfect. We'll have those links in the show notes. Great. Thanks. Carl, appreciate you coming on today and sharing some of your knowledge here. This book is just fantastic. It's a meaty book because it has a lot of actions in there. And as you said, one of the final tips is prioritize. Learn just two things. Pick two things and start taking action and then pick up the next two and it'll just improve the way you work. So really great information in this book and really appreciate you sharing this book. Thanks very much, Dave. I really appreciate all your kind comments and I hope people find it useful. I'm sure they will. Thanks again, Carl. You bet. All right. I hope you enjoyed that episode with Carl Wiegers. Carl shared some really great information and his book contains a ton more. I encourage you to think about new areas where you want to focus on growing your skills and putting in the time and effort to develop in those areas and then more importantly, apply those skills on your next project. For links to show notes and information shared in this episode, go to masteringbusinessanalysis.com slash episode 228. As always, I'll leave you with a quote and today's quote is from C.S. Lewis. You can't go back and change the beginning, but you can start where you are and change the ending. Thanks for listening. Before you go, I want to remind you of that special offer we have from C Prime Learning. You can get 25% off almost everything in their catalog of virtual and in-person courses by using coupon code MASTER25, that's M-A-S-T-E-R-2-5 all in capital letters. C Prime Learning offers in-person and online courses in Agile, Business Analysis, Project Management and more. So if you want to level up your skills and advance in your career, go to cprime.com slash learning and use coupon code MASTER25 at checkout for 25% off. You can also go to masteringbusinessanalysis.com slash C Prime to learn more about this great offer. Thanks again and I look forward to serving you in the next episode of Mastering Business Analysis. Thank you for listening to Mastering Business Analysis. Visit our website at masteringbusinessanalysis.com for more tools to advance in your career as a business analyst. Music"}, "podcast_summary": "In this podcast episode, Carl Wiegers, an independent consultant, author, and thought leader in the project community, shares insights from his latest book, \"Software Development Pearls: Lessons from 50 Years of Software Experience.\" Here are some key highlights from the episode:\n\n- Carl compiled 60 lessons from his 50 years of experience in software development and shares them in his book.\n- The book covers various areas, including requirements, design, project management, culture, teamwork, quality, and process improvement.\n- Each section starts with a tutorial on the topic, followed by real experience stories, and practical tutorials to help apply the knowledge.\n- One recurring theme is the need to iterate in software development. The first design approach is unlikely to be the best, and it's important to plan for feedback loops and revision cycles.\n- The importance of understanding stakeholders and customers is also stressed. Using a usage-centric approach, focusing on what customers need, rather than just gathering feature requests, leads to better results.\n- Quality is a key aspect throughout the book. Building quality in from the beginning is crucial, as fixing issues later costs more. Prioritizing continuous learning and applying that knowledge is a recommended action for personal and professional growth.\n\nIf you're interested in learning more about Carl Wiegers and his book, you can visit carlwiggers.com or processimpact.com. The book, \"Software Development Pearls,\" can be found at tinyurl.com/SDPearls. For a 25% discount on almost everything in C Prime Learning's catalog, use the coupon code MASTER25 at cprime.com/learning.", "podcast_guest": "Emma Watson", "podcast_highlights": "- Building quality in from the beginning is essential for project success.\n- Iteration is necessary in software development and design to find the best solutions.\n- Understanding stakeholders and customers is crucial for meeting their needs and delivering a successful product."}